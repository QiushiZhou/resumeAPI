name: Deploy Resume Backend to ECR

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: resume_backend-repo
  DOCKER_COMPOSE_FILE: docker-compose.yml # compose 文件路径
  IMAGE_TAG: ${{ github.sha }}
  KEEP_LAST_IMAGES: 5  # 保留最近5个镜像

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push backend Docker image
        run: |
          cd resume_backend
          docker build -t ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} \
                       -t ${{ env.ECR_REPOSITORY }}:latest .

      - name: Build and Push Frontend
        # if: github.repository == 'QiushiZhou/resumeAPI'  # 主仓库才推送
        run: |
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} build frontend
          docker tag frontend:latest ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:frontend-${{ github.sha }}
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:frontend-${{ github.sha }}

      - name: Build and Push Backend
        # if: github.repository == 'QiushiZhou/resumeAPI'  # 主仓库才推送
        run: |
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} build backend
          docker tag backend:latest ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:backend-${{ github.sha }}
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:backend-${{ github.sha }}

      - name: Cleanup old old images
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          REPO=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}
          
          # 获取所有镜像并按推送时间排序
          IMAGES=$(aws ecr describe-images --repository-name ${{ env.ECR_REPOSITORY }} \
                  --query 'sort_by(imageDetails,& imagePushedAt)[*].imageTags[0]' \
                  --output json | jq -r '.[]' | grep -v "latest")
          
          # 计算需要删除的镜像数量
          TOTAL_IMAGES=$(echo "$IMAGES" | wc -l)
          IMAGES_TO_DELETE=$((TOTAL_IMAGES - ${{ env.KEEP_LAST_IMAGES }}))
          
          if [ $IMAGES_TO_DELETE -gt 0 ]; then
            echo "Will delete $IMAGES_TO_DELETE old images"
            OLD_IMAGES=$(echo "$IMAGES" | head -n $IMAGES_TO_DELETE)
            
            for IMAGE in $OLD_IMAGES; do
              echo "Deleting $IMAGE"
              aws ecr batch-delete-image \
                --repository-name ${{ env.ECR_REPOSITORY }} \
                --image-ids imageTag=$IMAGE
            done
          else
            echo "No images to delete"
          fi
